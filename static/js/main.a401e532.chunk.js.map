{"version":3,"sources":["utils/API.js","components/Header/Header.js","components/SearchBar/SearchBar.js","components/AdvancedSearch/AdvancedSearch.js","components/WidgetIndexItem/WidgetIndexItem.js","components/WidgetIndex/WidgetIndex.js","components/WidgetShow/WidgetShow.js","components/WidgetForm/WidgetForm.js","components/WidgetIndexNavFilter/WidgetIndexNavFilter.js","App.js","serviceWorker.js","index.js"],"names":["API","getWidget","id","axios","get","concat","getWidgets","crossdomain","filterWidgets","color","then","widgets","filter","widget","createWidget","bookData","post","Header","props","react_default","a","createElement","className","title","SearchBar","htmlFor","type","name","onChange","handleSearchInput","onClick","submitSearch","children","AdvancedSearch","options","Object","toConsumableArray","colors","map","label","value","react_select_esm","selectedOption","handleColorFilter","WidgetIndexItem","truncatedDescription","createdDate","Moment","created_at","month","toString","days","year","slice","updatedDate","updated_at","description","length","react","selectWidget","Link","to","size","WidgetIndex","components_WidgetIndexItem_WidgetIndexItem","url","key","WidgetShow","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","placeholder","state","window","location","href","viewMachine","_this2","_ref","data","setState","catch","err","console","log","machine","toUpperCase","React","Component","WidgetForm","handleSubmit","event","preventDefault","size_id","parseInt","machine_id","status","success","handleChange","_event$target","target","defineProperty","showForm","errors","undefined","Redirect","rows","cols","WidgetIndexNavFilter","App","populate","selectedWidgets","message","selectedWidget","category","_ref2","onlyUnique","index","self","indexOf","search","sizes","advancedSearch","BrowserRouter","components_Header_Header","Switch","Route","exact","path","render","components_SearchBar_SearchBar","showAdvancedSearch","components_AdvancedSearch_AdvancedSearch","disabled","components_WidgetIndex_WidgetIndex","assign","components_WidgetIndexNavFilter_WidgetIndexNavFilter","components_WidgetShow_WidgetShow","components_WidgetForm_WidgetForm","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a401e532.chunk.js","sourcesContent":["\nimport axios from \"axios\";\n\nexport default {\n  // Gets books from the Google API\n  getWidget: function(id) {\n    return axios.get(`https://walles-widgets.herokuapp.com/widgets/${id}.json`);\n  },\n  // Gets all widgets\n  getWidgets: function() {\n    return axios.get(\"https://walles-widgets.herokuapp.com/widgets.json\",  { crossdomain: true });\n  },\n\n  // get widgets with a particular color\n  filterWidgets: function(color) {\n    axios.get(\"https://walles-widgets.herokuapp.com/widgets.json\",  { crossdomain: true }).then(\n      widgets => {\n        return widgets.filter(widget => widget.color === color)\n      });\n  },\n  // Saves an book to the database\n  createWidget: function(bookData) {\n    return axios.post(\"https://walles-widgets.herokuapp.com/widgets.json\", bookData);\n  }\n};","import React from \"react\";\nimport './Header.css';\n\nconst Header = props => (\n  <div className=\"header-container\">\n    <h1 className=\"header-title\">{props.title}</h1>\n  </div>\n);\n\nexport default Header;","import React from \"react\";\nimport './SearchBar.css';\n\nconst SearchBar = props => {\n    // let children;\n    // if(props.advancedSearch === 'true') {\n    //     children = props.children;\n    // }\n    \n    return (<div className=\"search-container\">\n        <form className=\"search-form\">\n            <label htmlFor=\"search\">Search:</label>\n            <input type=\"text\" name=\"search\" id=\"search\" \n                onChange={props.handleSearchInput}\n            />\n            <button onClick={props.submitSearch}>Search</button>\n        </form>\n        { props.children }\n    </div>);\n\n}\n    \n\n  export default SearchBar;","import React from \"react\";\nimport './AdvancedSearch.css';\nimport Select from \"react-select\"\n\n// const AdvancedSearch = props => (\n//     <div className=\"search-container\">\n\n//         <select>\n//             <option name=\"default\">Select Color</option>\n//             {props.colors.map( (color, idx) => \n//             <option name={color}>{color}</option>)}\n//         </select>\n//     </div>\n// );\n\nconst AdvancedSearch = props => {\n\n    let options = [ \"All\", ...props.colors].map( color => ({\n                label: color, \n                value: color\n            }));\n\n\n    return (<div className=\"search-container\">\n                < Select\n                    value={props.selectedOption}\n                    onChange={props.handleColorFilter}\n                    options={options}\n                />\n            </div>)\n}\n   \n\n\n  export default AdvancedSearch;\n\n","import React, { Fragment } from \"react\";\nimport './WidgetIndexItem.css';\nimport Moment from 'moment';\nimport { Link } from \"react-router-dom\";\n\n\n\nconst WidgetIndexItem = props => {\n    \n    let createdDate =   Moment(props.created_at).month().toString() + \"/\" + \n                        Moment(props.created_at).days() + \"/\" + \n                        Moment(props.created_at).year().toString().slice(2);\n\n    let updatedDate =   Moment(props.updated_at).month().toString() + \"/\" + \n                        Moment(props.updated_at).days() + \"/\" + \n                        Moment(props.updated_at).year().toString().slice(2);\n\n    let truncatedDescription;\n\n    if(props.description.length >= 10) {\n        truncatedDescription = props.description;\n    } else {\n        truncatedDescription = props.description.slice(0,9) + \"...\"\n    }\n    return (\n\n      \n        <Fragment>\n            \n                <tr>\n                    <td className=\"widget-index-item\" onClick={() => props.selectWidget(props.id)}>\n                    <Link to={`/widgets/${props.id}`}>{props.id}</Link>\n                    </td>\n                    <td className=\"widget-index-item\">{props.name}</td>\n                    <td className=\"widget-index-item\">{props.color}</td>\n                    <td className=\"widget-index-item\">{truncatedDescription}</td>\n                    <td className=\"widget-index-item\">{props.size}</td>\n                    <td className=\"widget-index-item\">{updatedDate}</td>\n                    <td className=\"widget-index-item\">{createdDate}</td>\n                </tr>\n        </Fragment>);\n};\n\nexport default WidgetIndexItem;","import React from \"react\";\nimport './WidgetIndex.css';\nimport WidgetIndexItem from '../WidgetIndexItem';\n\n\nconst WidgetIndex = (props) => {\n    const { widgets, children } = props;\n\n   return ( <table className=\"widgets-container\">\n        <tbody>\n        { children }\n        {widgets.map( widget => \n            <WidgetIndexItem \n            name={widget.name} \n            url={widget.url}\n            id={widget.id}\n            color={widget.color}\n            size={widget.size.title}\n            description={widget.description}\n            updated_at={widget.updated_at}\n            created_at={widget.created_at}\n            key={widget.id} \n            selectWidget={props.selectWidget}/>\n        )\n        }\n        </tbody>\n    </table>)\n};\n\n  export default WidgetIndex;","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport \"./WidgetShow.css\"\nimport API from '../../utils/API';\n\nclass WidgetShow extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            id: props.widget ? props.widget : window.location.href.slice(-2),\n            widget: null,\n            viewMachine: false\n        }\n    }\n\n    componentDidMount() {\n       API.getWidget(this.state.id).then( ({data}) => {\n           this.setState({widget: data});\n       }).catch((err) =>\n        console.log(err)\n     );\n    }\n\n    placeholder = () => {\n\n    }\n\n    render() {\n    \n        const { widget } = this.state;\n        if(widget === null) {\n            return(<div/>);\n            return;\n        } \n\n        let { machine } = this.state.widget;\n            \n\n        return(<div>\n            <Link to=\"/\">Back to Home</Link>\n            <h2>{widget.name[0].toUpperCase() + widget.name.slice(1)}</h2>\n            <ul>\n                <li>ID: {widget.id} </li>\n                <li>Color: {widget.color}</li>\n                <li>Name: {widget.name}</li>\n                <li>Size: {widget.size.title}</li>\n            </ul>\n            <h3>Machine Information</h3>\n            <ul>\n                <li>ID: {machine.id}</li>\n                <li>Title: {machine.title}</li>\n                <li>Created: {machine.created_at}</li>\n            </ul>\n\n        </div>)\n        }\n      \n       \n    }\n\n\n\n\nexport default WidgetShow;\n","import React, { Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport './WidgetForm.css'\nimport API from '../../utils/API';\n\nclass WidgetForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showForm: false,\n            name: \"\",\n            color: \"\",\n            description: \"\",\n            size: \"\",\n            success: false,\n            errors: undefined\n        }\n    }\n\n    handleSubmit = event => {\n        console.log(this.state)\n        event.preventDefault();\n        let widget = {\"widget\": {\n            name: this.state.name,\n            color: this.state.color,\n            description: this.state.description,\n            size_id: parseInt(this.state.size),\n            machine_id: 1\n        }}\n\n        API.createWidget(widget).then( (data) => {\n            if(data.status == 201) {\n                this.setState({success: true})\n            }\n        }).catch((err) =>\n        console.log(err)\n      );\n    }\n\n    handleChange = (event) => {\n        const { name, value } = event.target;\n        this.setState({\n          [name]: value\n        });\n    }\n\n    render() {\n\n        if(this.state.success) {\n            return (<Redirect to='/'/>);\n        };\n\n        return(<div>\n             <Link to=\"/\">Back to Home</Link>\n            <form>\n                <h2>Create A Widget!</h2>\n                <li>\n                    <div><label htmlFor=\"widget-name\">Name</label></div>\n                    <input type=\"text\" name=\"name\" id=\"widget-name\" onChange={this.handleChange}></input>\n                </li>\n                <li>\n                    <div><label htmlFor=\"widget-color\" >Color</label></div>\n                    <input type=\"text\" name=\"color\" id=\"widget-color\" onChange={this.handleChange}></input>\n                </li>\n                <li>\n                    <div><label htmlFor=\"widget-description\">Description</label></div>\n                    <textarea type=\"text\" name=\"description\" id=\"widget-description\" rows=\"4\" cols=\"50\" \n                    onChange={this.handleChange}>\n                    </textarea>\n                </li>\n                <li>\n                    <div><label htmlFor=\"widget-size\">Size</label></div>\n                    <input type=\"text\" name=\"size\" id=\"widget-size\" onChange={this.handleChange}></input>\n                </li>\n                <button onClick={this.handleSubmit}>Create Your New Widget</button>\n            </form>\n        </div>)\n    }\n\n}\n\nexport default WidgetForm;","import React, { Fragment } from \"react\";\nimport './WidgetIndexNavFilter.css';\n\nconst WidgetIndexNavFilter = ({ colors }) => {\n    \n    \n    return (<Fragment>\n        <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Color</th>\n            <th>Description</th>\n            <th>Size</th>\n            <th>Last Updated</th>\n            <th>Created At</th>\n        </tr>\n    </Fragment>);\n}\n\n\n\nexport default WidgetIndexNavFilter;","import React, { Fragment } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport './App.css';\nimport API from './utils/API';\nimport Header from './components/Header';\nimport SearchBar from './components/SearchBar';\nimport AdvancedSearch from './components/AdvancedSearch';\nimport WidgetIndex from './components/WidgetIndex';\nimport WidgetShow from './components/WidgetShow';\nimport WidgetForm from './components/WidgetForm';\nimport WidgetIndexNavFilter from './components/WidgetIndexNavFilter';\n\nconst WIDGETS_BREW = \"Widgets Brew\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: \"\",\n      selectedOption: null,\n      widgets: [],\n      selectedWidgets: [],\n      widget: {},\n      colors: [],\n      sizes: [],\n      advancedSearch: false\n    }\n  }\n\n  componentDidMount() {\n    this.populate();\n  }\n\n  populate = () => {\n    API.getWidgets().then( ({ data }) => {\n      this.setState({ widgets: data,\n                      selectedWidgets: data });\n    })\n    .catch((err) =>\n      this.setState({\n        widgets: [],\n        err: err,\n        message: \"No New Widgets Found, Try a Different Query\"\n      })\n    );\n  }\n\n  handleColorFilter = selectedOption => {\n    this.setState({ selectedOption });\n\n    if (selectedOption.value === 'All') {\n      this.setState({ \n        selectedWidgets: this.state.widgets\n      })\n    } else {\n      let selectedWidgets = [...this.state.widgets].filter( widget => \n        widget.color === selectedOption.value);\n      this.setState({selectedWidgets: selectedWidgets});\n    }\n  }\n\n\n  handleSearchInput = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  submitSearch = () => {\n\n  }\n\n  selectWidget = widget => {\n    this.setState({\n      selectedWidget: widget\n    });\n  }\n\n  filter = category => {\n    API.filterWidgets(category).then( ({ data }) => {\n      this.setState({widgets: data})\n    }).catch((err) =>\n      this.setState({\n        widgets: [],\n        err: err,\n        message: \"No Widgets Found, Try a Different Query\"\n      })\n    );\n  }\n\n  onlyUnique = (value, index, self) => { \n    return self.indexOf(value) === index;\n  }\n\n\n  render() {\n    const colors = this.state.widgets.map( widget => widget.color).filter(this.onlyUnique);\n\n    return (\n      <div className=\"App\">\n          <Router>\n            <div>\n              <Header title={WIDGETS_BREW}/>\n\n              <Switch>\n                <Route exact path=\"/\" render={props => \n                  <Fragment>\n                    <SearchBar  \n                      search={this.state.search} \n                      handleSearchInput={this.handleSearchInput}\n                      submitSearch={this.submitSearch}\n                      showAdvancedSearch={this.state.advancedSearch}\n                    >\n                          <AdvancedSearch \n                            colors={colors}\n                            search={this.state.search} \n                            disabled={this.state.advancedSearch}\n                            selectedOption={this.state.selectedOption}\n                            handleColorFilter={this.handleColorFilter}\n                            submitSearch={this.submitSearch}/>\n                          <Link to={\"/new\"}>Create a New Widget!</Link>\n                    </SearchBar>\n                    <WidgetIndex\n                      {...props}\n                      widgets={this.state.selectedWidgets}\n                      selectWidget={this.selectWidget}\n                    >\n\n                        <WidgetIndexNavFilter \n                          filter={this.filter} \n                          colors={colors}/>\n\n                    </WidgetIndex>\n                  </Fragment>\n                  } \n                />\n                   <Route exact path=\"/widgets/:widget\" render={props => \n                    <WidgetShow widget={this.state.selectedWidget}/>\n                  } \n                  />\n                  <Route exact path=\"/new\" render={props => \n                    <WidgetForm />\n                  } \n                />\n              </Switch>\n            </div>\n          </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}